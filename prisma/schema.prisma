// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  udpatedAt  DateTime  @updatedAt
  slug       String    @unique
  title      String
  body       String
  score      Int
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  status     Status    @relation(fields: [statusId], references: [id])
  statusId   String
  comments   Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  body      String
  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
  parentId  String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

model Category {
  id    String @id @default(cuid())
  name  String
  slug  String
  posts Post[]
}

model Status {
  id    String @id @default(cuid())
  name  String
  slug  String
  posts Post[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  login         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
